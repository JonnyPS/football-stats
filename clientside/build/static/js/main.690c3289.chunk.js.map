{"version":3,"sources":["App.js","Chart.js","serviceWorker.js","index.js"],"names":["require","DisplayHeader","react_default","a","createElement","DisplayStats","props","console","log","className","class","teamName","gamesPlayed","gamesWon","gamesLost","gamesDrawn","longestWinningStreak","longestLosingStreak","DisplayDetails","teams","map","key","i","src","logo","alt","name","onClick","event","activateClickResponse","styleImg","target","ControlButtons","resetState","removeDataset","showAllDatasets","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","allTeams","allMatches","profile","colour","teamDetails","teamId","input","selectedMatches","selectedTeam","homeTeam","awayTeam","winner","score","result","matchday","outcomes","data","labels","datasets","updateInput","bind","assertThisInitialized","findMatches","selectTeam","toggleImg","setOpacity","checkDatasetsForDuplicates","initialState","setState","length","label","splice","_this2","item","index","undefined","_this3","replace","c","toUpperCase","img","classList","contains","remove","add","showAll","logos","document","getElementsByClassName","getAttribute","dupTeamNum","indexOf","currentState","filter","_this4","addy","h","Headers","append","req","Request","method","headers","mode","fetch","then","response","json","counter","id","shortName","concat","catch","ex","saveInitialState","e","value","array","v","num","tempStreaks","streakResults","push","Math","max","apply","_this5","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_loop","teamColour","selectedTeamId","TeamName","resultsOfMatches","fixtures","filteredMatches","matches","match","home","away","fullTime","matchesSoFar","game","ourTeam","pointsSoFar","reduce","acc","current","getGameStats","winningStreak","getLongestStreak","losingStreak","defineProperty","backgroundColor","borderColor","_iterator","Symbol","iterator","next","done","err","return","es","height","width","options","animation","duration","tooltips","callbacks","title","tooltipItem","teamInDataSet","datasetIndex","highlightedGameNumber","highlightedGameDetails","afterTitle","legend","display","scales","yAxes","ticks","min","stepSize","scaleLabel","labelString","xAxes","text","Component","List","items","Boolean","window","location","hostname","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.690c3289.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nvar cloneDeep = require('clone-deep');\r\n\r\n\r\nfunction DisplayHeader () {\r\n  return (\r\n    <h1>Premier League Table 2018/19 displayed in linear graph form</h1>\r\n  )\r\n}\r\n\r\nfunction DisplayStats (props) {\r\n  console.log('props', props)\r\n  return (\r\n    <ul className=\"stats-list\">\r\n      <li class=\"body-copy\"><span className=\"bold-copy\">{props.teamName}</span></li>\r\n      <br />\r\n      <li class=\"body-copy--small\">Number of games played: <span className=\"bold-copy\">{props.gamesPlayed}</span></li>\r\n      <li class=\"body-copy--small\">Games won: <span className=\"bold-copy\">{props.gamesWon}</span></li>\r\n      <li class=\"body-copy--small\">Games lost: <span className=\"bold-copy\">{props.gamesLost}</span></li>\r\n      <li class=\"body-copy--small\">Games drawn: <span className=\"bold-copy\">{props.gamesDrawn}</span></li>\r\n      <br />\r\n      <li class=\"body-copy--small\">Longest winning streak: <span className=\"bold-copy\">{props.longestWinningStreak}</span></li>\r\n      <li class=\"body-copy--small\">Longest losing streak: <span className=\"bold-copy\">{props.longestLosingStreak}</span></li>\r\n    </ul>\r\n  )\r\n}\r\n\r\nfunction DisplayDetails (props) {\r\n  return (\r\n    <div className=\"logo-section\">\r\n    <ul className=\"inline-list\">\r\n      {props.teams.map( (key, i) => (\r\n        <li key={i}>\r\n          <img src={key.logo} alt={key.name} className=\"team-logo\" onClick={(event) => {props.activateClickResponse(key.name);props.styleImg(event.target)}} />\r\n        </li>\r\n      ))}  \r\n    </ul>\r\n    <h5>Click on the logos above to display them on the graph.</h5>\r\n    <br />\r\n    <h5>Hover over the data on the chart to display the match.</h5> \r\n    </div>\r\n  )\r\n}\r\n\r\nfunction ControlButtons (props) {\r\n  return (\r\n    <div className=\"button-container\">\r\n      <button onClick={props.resetState}>Reset</button>\r\n      <button onClick={props.removeDataset}>Remove</button>\r\n      <button onClick={props.showAllDatasets}>Show All</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nclass App extends Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      allTeams: null,\r\n      allMatches: null,\r\n      profile: [\r\n        {\r\n          logo: 'img/arsenal.png',\r\n          name: 'Arsenal',\r\n          colour: '#f00005',\r\n        },\r\n        {\r\n          logo: 'img/bournemouth.png',\r\n          name: 'Bournemouth',\r\n          colour: '#8d0104',\r\n        },\r\n        {\r\n          logo: 'img/brighton-hove.png',\r\n          name: 'Brighton Hove',\r\n          colour: '#005daa',\r\n        },\r\n        {\r\n          logo: 'img/burnley.png',\r\n          name: 'Burnley',\r\n          colour: '#fff515',\r\n        },\r\n        {\r\n          logo: 'img/cardiff.png',\r\n          name: 'Cardiff',\r\n          colour: '#035da9',\r\n        },\r\n        {\r\n          logo: 'img/chelsea.png',\r\n          name: 'Chelsea',\r\n          colour: '#024595',\r\n        },\r\n        {\r\n          logo: 'img/crystal-palace.png',\r\n          name: 'Crystal Palace',\r\n          colour: '#b80007',\r\n        },\r\n        {\r\n          logo: 'img/everton.png',\r\n          name: 'Everton',\r\n          colour: '#133e6c',\r\n        },\r\n        {\r\n          logo: 'img/fulham.png',\r\n          name: 'Fulham',\r\n          colour: '#000000',\r\n        },\r\n        {\r\n          logo: 'img/huddersfield.png',\r\n          name: 'Huddersfield',\r\n          colour: '#003d93',\r\n        },\r\n        {\r\n          logo: 'img/leicester-city.png',\r\n          name: 'Leicester City',\r\n          colour: '#003d93',\r\n        },\r\n        {\r\n          logo: 'img/liverpool.png',\r\n          name: 'Liverpool',\r\n          colour: '#d00623',\r\n        },\r\n        {\r\n          logo: 'img/man-city.png',\r\n          name: 'Man City',\r\n          colour: '#5ba0da',\r\n        },\r\n        {\r\n          logo: 'img/man-united.png',\r\n          name: 'Man United',\r\n          colour: '#da030e',\r\n        },\r\n        {\r\n          logo: 'img/newcastle.png',\r\n          name: 'Newcastle',\r\n          colour: '#000',\r\n        },\r\n        {\r\n          logo: 'img/southampton.png',\r\n          name: 'Southampton',\r\n          colour: '#ed1a3b',\r\n        },\r\n        {\r\n          logo: 'img/tottenham.png',\r\n          name: 'Tottenham',\r\n          colour: '#aeaeae',\r\n        },\r\n        {\r\n          logo: 'img/watford.png',\r\n          name: 'Watford',\r\n          colour: '#fef823',\r\n        },\r\n        {\r\n          logo: 'img/west-ham.png',\r\n          name: 'West Ham',\r\n          colour: '#7b2c3a',\r\n        },\r\n        {\r\n          logo: 'img/wolverhampton.png',\r\n          name: 'Wolverhampton',\r\n          colour: '#faa61a',\r\n        },        \r\n      ],\r\n\r\n      teamDetails: [\r\n        {\r\n          teamId: 'Team Id',\r\n          teamName: 'Team Name',\r\n        },\r\n      ],\r\n      input: '',\r\n      selectedMatches: [\r\n        {\r\n          selectedTeam: null,\r\n          homeTeam: null,\r\n          awayTeam: null,\r\n          winner: null,\r\n          score: null,\r\n          result: [null],\r\n        },\r\n      ],\r\n      teamName: null,\r\n      gamesPlayed: null,\r\n      gamesWon: null,\r\n      gamesLost: null,\r\n      gamesDrawn: null,\r\n      longestWinningStreak: null,\r\n      longestLosingStreak: null,\r\n\r\n      matchday: [],\r\n      outcomes: [],\r\n      data: {\r\n        labels: '',\r\n        datasets: [{\r\n        }]\r\n      },\r\n\r\n    }\r\n\r\n    // because of where these functions are called... (?)\r\n    // we need to define that 'this', refers to our component App\r\n    this.updateInput = this.updateInput.bind( this )\r\n    this.findMatches = this.findMatches.bind( this )\r\n    this.selectTeam = this.selectTeam.bind( this )\r\n    this.resetState = this.resetState.bind( this )\r\n    this.removeDataset = this.removeDataset.bind( this )\r\n    this.showAllDatasets = this.showAllDatasets.bind( this )\r\n    this.toggleImg = this.toggleImg.bind( this )\r\n    this.setOpacity = this.setOpacity.bind( this )\r\n    this.checkDatasetsForDuplicates = this.checkDatasetsForDuplicates.bind( this )\r\n  }\r\n\r\n  saveInitialState() {\r\n    console.log( 'save initialState' )\r\n    console.log( 'initialState =', this.state )\r\n\r\n    this.initialState = [this.state]\r\n  }\r\n\r\n  resetState() {\r\n    console.log('resetState')\r\n    this.setState( this.initialState[0] )\r\n    this.setOpacity()\r\n  }\r\n\r\n  removeDataset() {\r\n    console.log('removeDataset')\r\n    // get last element in datasets array and send the name of that objects label to setOpacity()\r\n    this.setOpacity( this.state.data.datasets[this.state.data.datasets.length-1].label )\r\n    this.setState( this.state.data.datasets.splice(-1, 1) )\r\n  }\r\n\r\n  showAllDatasets() {\r\n    console.log('showAllDatasets')\r\n    this.state.profile.map( (item, index) => {\r\n      this.findMatches( item.name )\r\n      this.setOpacity(undefined, true)\r\n    })\r\n  }\r\n\r\n  selectTeam(name) {\r\n    console.log('selectTeam name', name )\r\n    this.setState({\r\n      input: name.replace(/^\\w/, c => c.toUpperCase())\r\n    }, () => {\r\n      this.findMatches()\r\n    })\r\n  }\r\n\r\n  toggleImg(img) {\r\n    // check to see if class exists on element\r\n    // if not - add class\r\n    // if true - remove class\r\n    if( img.classList.contains('toggle-opacity')) {\r\n      img.classList.remove('toggle-opacity')\r\n    } else {\r\n      img.classList.add('toggle-opacity');\r\n    }\r\n  }\r\n\r\n  setOpacity(label, showAll) {\r\n    let logos = document.getElementsByClassName('team-logo');\r\n    // if label is not undefined - ie: operation should be perfomed on a single team, not all of them\r\n    // then remove class on image whose alt tag matches the label parameter\r\n    // else remove class on all images\r\n    if ( label !== undefined ) {\r\n      for (var i = 0; i < logos.length; i++ ) {\r\n        let logoAlt = logos[i].getAttribute('alt')\r\n        if (logoAlt === label ) {\r\n          logos[i].classList.remove('toggle-opacity')          \r\n        }\r\n      }\r\n    } else if ( showAll === true ) {\r\n     for (var i = 0; i < logos.length; i++ ) {\r\n        logos[i].classList.add('toggle-opacity')\r\n      } \r\n    } else {\r\n      for (var i = 0; i < logos.length; i++ ) {\r\n        logos[i].classList.remove('toggle-opacity')\r\n      }\r\n    }\r\n    \r\n  }\r\n\r\n  checkDatasetsForDuplicates(name) {\r\n    // this.toggleImg(img)\r\n    // return an array of boolean values whilst checking\r\n    // if the datasets array has an item whose label value\r\n    // equals our clicked on team name\r\n\r\n    // check if our clicked on team already exists in our compenents state\r\n    var test = this.state.data.datasets.map((item) => {\r\n      // console.log('item.label', item.label)\r\n      return item.label === name;\r\n    })\r\n\r\n    // get position of true value item in array if it exists\r\n    var dupTeamNum = test.indexOf(true);\r\n    // if item true doesn't exist, run findMatches()\r\n    // else remove clicked on team from datasets array\r\n    if ( dupTeamNum === -1 ) {    \r\n      this.findMatches(name)\r\n    } else {\r\n      // let currentDatasets = this.state.data.datasets;\r\n      // currentDatasets.splice(dupTeamNum, 1);\r\n      this.setState((currentState) => {\r\n        return {\r\n          data: {\r\n            datasets: currentState.data.datasets.filter((item, index) => {\r\n              \r\n              console.log('return item: ', item)\r\n              console.log('return index: ', index)\r\n              console.log('item[index]', item[index])\r\n              console.log('dupTeamNum', dupTeamNum)\r\n              return index !== dupTeamNum  \r\n            })\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log( 'componentDidMount - get json data' )\r\n    // Use first urls array when new season starts, whilst in summer recess use second urls array\r\n    // const urls = ['https://api.football-data.org/v2/competitions/PL/teams', 'https://api.football-data.org/v2/competitions/PL/matches?status=FINISHED']\r\n    const urls = ['https://api.football-data.org/v2/competitions/PL/teams?season=2018', 'https://api.football-data.org/v2/competitions/PL/matches?season=2018']\r\n    // map over array to use the url addresses\r\n    urls.map( ( addy ) => {\r\n      // set up headers\r\n      let h = new Headers()\r\n      h.append('Accept', 'application/json')\r\n      h.append('X-Auth-Token', '9d006876cd4d43f08084a828529fc968')\r\n      let req = new Request(addy, {\r\n        method: 'GET',\r\n        headers: h,\r\n        mode: 'cors' \r\n      })\r\n\r\n      // for each url in the array, use fetch to get the resource\r\n      fetch(req) \r\n      .then( (response) => {\r\n        return response.json()    \r\n      })\r\n      .then( (json) => {\r\n        console.log('json', json)\r\n        // hacky if / else statement - should probably be replaced by a for in loop\r\n        // it will surfice temporarily\r\n        if ( this.state.allTeams == null ) { \r\n          // extract only the id and team short name from the returned data\r\n          // loop over every team, get the data and assign it in to an array of objects\r\n          json.teams.map((counter) => {\r\n            const teamId = counter.id\r\n            const teamName = counter.shortName\r\n            this.setState((currentState) => {\r\n              return {\r\n                allTeams: json,\r\n                teamDetails: currentState.teamDetails.concat([{\r\n                  teamName: teamName,\r\n                  teamId: teamId\r\n                }]),\r\n              }\r\n            })\r\n          })\r\n        } else {\r\n          // when looping over urls[1], assign value to this.state.allMatches property\r\n          this.setState(( currentState ) => {\r\n            return {\r\n              allMatches: json,\r\n            }\r\n          })\r\n        }\r\n        // once the data has loaded, \r\n        if ( this.state.allTeams !== null && this.state.allMatches !== null ) {       \r\n        }\r\n              })\r\n      .catch( (ex) => {\r\n        console.log('parsing failed:', ex)\r\n      })\r\n      .then ( () => {\r\n        this.saveInitialState()\r\n      })\r\n    })\r\n  }\r\n\r\n  // will only run after component has updated \r\n  // - good for catching errors where the code is run but the state has not yet updated\r\n  componentDidUpdate() {\r\n    // console.log('state on update', this.state )\r\n    // console.log('this.state.data.datasets', this.state.data.datasets)\r\n  }\r\n\r\n  updateInput(e) {\r\n    const value = e.target.value\r\n    this.setState({\r\n      input: value.replace(/^\\w/, c => c.toUpperCase())\r\n    })\r\n  }\r\n\r\n  // get number of games won, lost or drawn\r\n  getGameStats(array, value) {\r\n    return array.filter((v) => (v === value)).length;\r\n  }\r\n\r\n  getLongestStreak(array, num) {\r\n    console.log('getLongestStreak')\r\n    // setup arrays to hold our results\r\n    let tempStreaks = []; // tracks each streak\r\n    let streakResults = []; // holds value of all streaks\r\n    // iterate over array\r\n    array.map((item, index) => {\r\n      // store each item in streak in array, if item doesn't match our value then\r\n      // empty temp array and push it's value, into results array\r\n      if ( item === num ) {\r\n        tempStreaks.push(item);\r\n        if ( item === num && index === array.length-1 ) {\r\n          streakResults.push(tempStreaks.length)\r\n        }\r\n      } else {\r\n        streakResults.push(tempStreaks.length);\r\n        tempStreaks =  [];\r\n      }\r\n    })\r\n    // get highest value in results array - this is the length of our longest streak\r\n    return Math.max.apply(Math, streakResults)\r\n  }\r\n\r\n  findMatches( name ) {\r\n    // look through all teams in our list of teams\r\n    for (let item of this.state.teamDetails) {\r\n      // check our list to see if our input matches any team names \r\n      if ( this.state.input === item.teamName || name === item.teamName ) {\r\n        var teamColour = this.state.profile.filter( (key) => { return key.name === item.teamName } )\r\n        var colour = teamColour[0].colour\r\n        let selectedTeamId = item.teamId\r\n        let TeamName = item.teamName\r\n        let resultsOfMatches = []\r\n        let fixtures = []\r\n\r\n        // return only matches that involve our team\r\n        let filteredMatches = this.state.allMatches.matches.filter( (match) => { return match.awayTeam.id === selectedTeamId || match.homeTeam.id === selectedTeamId })\r\n\r\n        filteredMatches.map( (match) => {\r\n          return (\r\n            fixtures.push({\r\n              home: match.homeTeam.name,\r\n              away: match.awayTeam.name,\r\n              score: match.score.fullTime.homeTeam + ' : ' + match.score.fullTime.awayTeam,\r\n              winner: match.score.winner\r\n            })\r\n          )\r\n        })\r\n\r\n        let matchesSoFar = filteredMatches.map( (game) => { return game.matchday } )\r\n\r\n        function getMatchResults( game, ourTeam ) {\r\n          let result = game.score.winner\r\n          let home = game.homeTeam.id\r\n          if ( result === \"HOME_TEAM\" && home === selectedTeamId ) { resultsOfMatches.push( 3 ) }\r\n          if ( result === \"HOME_TEAM\" && home !== selectedTeamId ) { resultsOfMatches.push( 0 ) }\r\n          if ( result === \"AWAY_TEAM\" && home === selectedTeamId ) { resultsOfMatches.push( 0 ) }\r\n          if ( result === \"AWAY_TEAM\" && home !== selectedTeamId ) { resultsOfMatches.push( 3 ) }\r\n          if ( result === \"DRAW\" ) { resultsOfMatches.push( 1 ) }\r\n        }\r\n\r\n\r\n        filteredMatches.map( getMatchResults )\r\n        \r\n        console.log('filteredMatches', filteredMatches)\r\n\r\n        // addUpMatches\r\n        var pointsSoFar = resultsOfMatches.reduce((acc, current) => {\r\n          acc.push((acc[acc.length - 1] || 0) + current);\r\n          return acc;\r\n        }, [])\r\n\r\n\r\n        console.log('resultsOfMatches', resultsOfMatches)\r\n\r\n        // get game stats\r\n        let gamesWon = this.getGameStats(resultsOfMatches, 3);\r\n        let gamesDrawn = this.getGameStats(resultsOfMatches, 1);\r\n        let gamesLost = this.getGameStats(resultsOfMatches, 0);\r\n        let winningStreak = this.getLongestStreak(resultsOfMatches, 3);\r\n        let losingStreak = this.getLongestStreak(resultsOfMatches, 0);\r\n        console.log('winningStreak', winningStreak)\r\n        console.log('losingStreak', losingStreak)\r\n        // map over our matches and set component state accordingly\r\n        this.setState( (currentState) => {\r\n          return {\r\n            teamName: name,\r\n            gamesPlayed: resultsOfMatches.length,\r\n            gamesWon: gamesWon,\r\n            gamesDrawn: gamesDrawn,\r\n            gamesLost: gamesLost,\r\n            longestWinningStreak: winningStreak,\r\n            longestLosingStreak: losingStreak,\r\n            matchday: filteredMatches,\r\n            data: {\r\n              labels: matchesSoFar,\r\n              datasets: currentState.data.datasets.concat({ \r\n                label: TeamName,\r\n                backgroundColor: colour,\r\n                // borderColor: 'rgb(255, 99, 132)',\r\n                data: pointsSoFar,\r\n                fixtures: fixtures,\r\n                borderColor: colour,\r\n                backgroundColor: 'transparent',\r\n              })\r\n            },\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n  \r\n  render(json, item) {\r\n    return (\r\n      <div>\r\n        <DisplayHeader \r\n        />\r\n        <DisplayDetails\r\n          teams={this.state.profile}\r\n          activateClickResponse={this.checkDatasetsForDuplicates}\r\n          styleImg={this.toggleImg}\r\n        /> \r\n        <DisplayStats\r\n          teamName={this.state.teamName}\r\n          gamesPlayed={this.state.gamesPlayed}\r\n          gamesWon={this.state.gamesWon}\r\n          gamesLost={this.state.gamesLost}\r\n          gamesDrawn={this.state.gamesDrawn}\r\n          longestWinningStreak={this.state.longestWinningStreak}\r\n          longestLosingStreak={this.state.longestLosingStreak}\r\n        />        \r\n        <Line \r\n          data={this.state.data}\r\n          height={200}\r\n          width={400}\r\n          options={{\r\n            animation: {\r\n              duration: 0\r\n            },\r\n            tooltips: {\r\n              callbacks: {\r\n                title: function( tooltipItem, data ) {\r\n                  var teamInDataSet = tooltipItem[0].datasetIndex;\r\n                  var highlightedGameNumber = tooltipItem[0].index;\r\n                  var highlightedTeamName = data.datasets[teamInDataSet].label;\r\n                  var highlightedGameDetails = data.datasets[teamInDataSet].fixtures[highlightedGameNumber];\r\n                  return highlightedGameDetails.home + ' v ' + highlightedGameDetails.away; \r\n                },\r\n                afterTitle: function( tooltipItem, data ) {\r\n                  var teamInDataSet = tooltipItem[0].datasetIndex;\r\n                  var highlightedGameNumber = tooltipItem[0].index;\r\n                  var highlightedTeamName = data.datasets[teamInDataSet].label;\r\n                  var highlightedGameDetails = data.datasets[teamInDataSet].fixtures[highlightedGameNumber];\r\n                  return highlightedGameDetails.score;\r\n                }\r\n              },\r\n              label: null,\r\n            },\r\n            legend: {\r\n              display: false,\r\n            },\r\n            scales: {\r\n              yAxes: [{\r\n                ticks: {\r\n                  max: this.state.matchday.length * 3,\r\n                  min: 0,\r\n                  stepSize: 6,\r\n                },\r\n                scaleLabel: {\r\n                  display: true,\r\n                  labelString: 'Points available'\r\n                }\r\n              }],\r\n              xAxes: [{\r\n                scaleLabel: {\r\n                  display: true,\r\n                  labelString: 'Matchday'\r\n                }\r\n              }]\r\n            },\r\n            title: {\r\n              text: '',\r\n            }\r\n          }}\r\n        />\r\n        <ControlButtons \r\n          resetState={this.resetState}\r\n          removeDataset={this.removeDataset}\r\n          showAllDatasets={this.showAllDatasets}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\n\r\n\r\nfunction List (props) {\r\n  return (\r\n    <ul>\r\n    \t{props.items.map( (value) => (\r\n    \t\t<li key={value}>\r\n    \t\t\t{value}\r\n\t\t\t</li>\r\n    \t))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nclass Chart extends Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\t  list: ['something', 'someone', 'somewhere'],\r\n\t}\r\n  }\r\n\r\n  componentDidMount() {\r\n  \t\r\n  }\r\n\r\n  render() {\r\n  \tconsole.log( 'this first component' )\r\n  \tconsole.log( this )\r\n  \t// return null\r\n    return (\r\n      <List items={this.state.list} />\r\n    )\r\n  }\r\n}\r\n\r\nexport default Chart;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport Chart from './Chart';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('inputBox'));\r\n// ReactDOM.render(<Chart />, document.getElementById('chartHolder'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}